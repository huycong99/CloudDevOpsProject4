name: Backend Continuous Deployment

on:
  # This allows running on-demand
  workflow_dispatch:
  push:
    branches:
      - master
    paths:
      # This will only run on changes to the backend code
      - "starter/backend/**"

env:
  PYTHON_VERSION: 3.11
  AWS_REGION: us-east-1
  REPOSITORY: backend
  DOCKER_IMAGE_TAG: ${{ github.sha }}

jobs:
  lint_job:
    name: Backend Lint Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pipenv dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pipenv
          key: pipenv-${{ runner.os }}-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            pipenv-${{ runner.os }}-

      - name: Install dependencies
        run: |
          pip install pipenv
          pipenv install flake8  
          pipenv install

      - name: Add Lint Script to Pipfile
        run: |
          echo -e "\n[scripts]\nlint = \"flake8 .\"" >> Pipfile
          echo "Added lint script to Pipfile."

      - name: Create Flake8 Configuration
        run: |
          echo "[flake8]" > .flake8
          echo "max-line-length = ${{env.FLAKE8_MAX_LINE_LENGTH}}" >> .flake8

      - name: Run lint
        run: |
          pipenv run lint

  test_job:
    name: Backend run test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{env.PYTHON_VERSION}}

      - name: Cache pipenv dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pipenv
          key: pipenv-${{ runner.os }}-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            pipenv-${{ runner.os }}-

      - name: Install dependencies
        run: |
          pip install pipenv
          pipenv install

      - name: Run tests
        run: |
          pipenv run test

  build:
    name: Build, Push Docker image to Amazon ECR and Deploy
    runs-on: ubuntu-latest
    needs:
      - lint_job
      - test_job
    defaults:
      run:
        working-directory: ./starter/backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{env.PYTHON_VERSION}}

      - name: Install dependencies
        run: |
          pip install pipenv
          pipenv install

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"

      - name: Build and Push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "Registry: $REGISTRY"
          echo "Repository: ${{ env.REPOSITORY}}"
          echo "Image Tag: ${{ env.DOCKER_IMAGE_TAG }}"
          docker build -t $REGISTRY/${{ env.REPOSITORY}}:${{ env.DOCKER_IMAGE_TAG }} .
          docker push $REGISTRY/${{ env.REPOSITORY}}:${{ env.DOCKER_IMAGE_TAG }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name cluster

      - name: Set Docker image in Kustomize
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: kustomize edit set image backend=$REGISTRY/${{ env.REPOSITORY}}:${{ env.DOCKER_IMAGE_TAG }}
        working-directory: ./starter/backend/k8s

      - name: Deploy Kubernetes resources
        run: kustomize build | kubectl apply -f -
        working-directory: ./starter/backend/k8s
